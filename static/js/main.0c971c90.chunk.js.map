{"version":3,"sources":["AffiliateCalculator.js","App.js","index.js"],"names":["AffiliateCalculator","currentRevenue","setCurrentRevenue","useState","currentCAC","setCurrentCAC","affiliateCommission","setAffiliateCommission","aov","setAOV","cltv","setCLTV","cogs","setCOGS","projections","setProjections","loading","setLoading","React","createElement","className","type","value","onChange","e","target","placeholder","onClick","calculateProjections","setTimeout","revenue","parseFloat","commission","averageOrderValue","customerLifetimeValue","cogsPercentage","agencyCommission","Math","min","milestones","3","6","9","12","cumulativeCustomers","results","Array","fill","map","_","month","monthNumber","targetPercentage","previousMilestone","Object","entries","filter","_ref","m","parseInt","reduce","acc","curr","nextMilestone","_ref2","prevMonth","prevTarget","nextMonth","nextTarget","progress","getTargetPercentageForMonth","startRevenue","newRevenue","newCustomers","round","ltvRevenue","totalMonthlyRevenue","affiliateCost","agencyCost","max","totalPartnershipSpend","cogsTotal","fbMediaSpend","fbAgencyFee","equivalentFacebookSpend","profit","rops","fbSpendDifference","totalRevenue","totalSpend","toFixed","facebookComparison","percentOfRevenue","customers","totalCustomers","disabled","Fragment","Loader2","ResponsiveContainer","width","height","LineChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","formatter","toLocaleString","Legend","Line","stroke","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c971c90.chunk.js","sourcesContent":["// src/AffiliateCalculator.js\n\nimport React, { useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { Loader2 } from 'lucide-react';\nimport './AffiliateCalculator.css';\n\nconst AffiliateCalculator = () => {\n  // State variables\n  const [currentRevenue, setCurrentRevenue] = useState('');\n  const [currentCAC, setCurrentCAC] = useState('');\n  const [affiliateCommission, setAffiliateCommission] = useState('');\n  const [aov, setAOV] = useState('');\n  const [cltv, setCLTV] = useState('');\n  const [cogs, setCOGS] = useState('');\n  const [projections, setProjections] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const calculateProjections = () => {\n    setLoading(true);\n\n    setTimeout(() => {\n      if (!currentRevenue || !currentCAC || !affiliateCommission || !aov || !cltv || !cogs) {\n        setLoading(false);\n        return;\n      }\n\n      // Parsing input values\n      const revenue = parseFloat(currentRevenue);\n      const commission = parseFloat(affiliateCommission) / 100;\n      const averageOrderValue = parseFloat(aov);\n      const customerLifetimeValue = parseFloat(cltv);\n      const cogsPercentage = parseFloat(cogs) / 100;\n      const agencyCommission = Math.min(commission * 1.5, 0.05);\n      const fbAgencyFeePercent = 0.15;\n\n      // Milestone percentages\n      const milestones = { 3: 0.20, 6: 0.40, 9: 0.70, 12: 1.00 };\n\n      // Function to determine the growth percentage for a given month\n      const getTargetPercentageForMonth = (month) => {\n        const previousMilestone = Object.entries(milestones)\n          .filter(([m]) => parseInt(m) <= month)\n          .reduce((acc, curr) => (acc[0] > curr[0] ? acc : curr), [0, 0]);\n        \n        const nextMilestone = Object.entries(milestones)\n          .filter(([m]) => parseInt(m) > month)\n          .reduce((acc, curr) => (acc[0] < curr[0] ? acc : curr), [12, 1]);\n        \n        const prevMonth = parseInt(previousMilestone[0]);\n        const prevTarget = previousMilestone[1];\n        const nextMonth = parseInt(nextMilestone[0]);\n        const nextTarget = nextMilestone[1];\n\n        const progress = (month - prevMonth) / (nextMonth - prevMonth);\n        const smoothProgress = progress * progress * (3 - 2 * progress);\n        return prevTarget + (nextTarget - prevTarget) * smoothProgress;\n      };\n\n      // Cumulative customers tracker\n      let cumulativeCustomers = 0;\n\n      const results = Array(12).fill(0).map((_, month) => {\n        const monthNumber = month + 1;\n        const targetPercentage = getTargetPercentageForMonth(monthNumber);\n        const targetRevenue = revenue * targetPercentage;\n\n        const startRevenue = monthNumber === 1 ? 5000 : 0;\n        const newRevenue = startRevenue + (targetRevenue - startRevenue);\n\n        const newCustomers = Math.round(newRevenue / averageOrderValue);\n        cumulativeCustomers += newCustomers;\n\n        const ltvRevenue = cumulativeCustomers * ((customerLifetimeValue - averageOrderValue) / 12);\n        const totalMonthlyRevenue = newRevenue + ltvRevenue;\n\n        const affiliateCost = newRevenue * commission;\n        const agencyCost = Math.max(3500, newRevenue * agencyCommission);\n        const totalPartnershipSpend = affiliateCost + agencyCost;\n        const cogsTotal = totalMonthlyRevenue * cogsPercentage;\n\n        const totalCustomers = totalMonthlyRevenue / averageOrderValue;\n        const fbMediaSpend = totalCustomers * parseFloat(currentCAC);\n        const fbAgencyFee = fbMediaSpend * fbAgencyFeePercent;\n        const equivalentFacebookSpend = fbMediaSpend + fbAgencyFee;\n\n        const profit = totalMonthlyRevenue - totalPartnershipSpend - cogsTotal;\n        const rops = totalMonthlyRevenue / totalPartnershipSpend;\n        const fbSpendDifference = equivalentFacebookSpend - totalPartnershipSpend;\n\n        return {\n          month: monthNumber,\n          newRevenue: Math.round(newRevenue),\n          ltvRevenue: Math.round(ltvRevenue),\n          totalRevenue: Math.round(totalMonthlyRevenue),\n          cogs: Math.round(cogsTotal),\n          affiliateCost: Math.round(affiliateCost),\n          agencyCost: Math.round(agencyCost),\n          totalSpend: Math.round(totalPartnershipSpend),\n          profit: Math.round(profit),\n          rops: parseFloat(rops.toFixed(2)),\n          fbSpendDifference: Math.round(fbSpendDifference),\n          facebookComparison: Math.round(equivalentFacebookSpend),\n          percentOfRevenue: parseFloat(((totalMonthlyRevenue / revenue) * 100).toFixed(1)),\n          customers: newCustomers,\n          totalCustomers: cumulativeCustomers,\n          fbMediaSpend: Math.round(fbMediaSpend),\n          fbAgencyFee: Math.round(fbAgencyFee),\n          targetPercentage: Math.round(targetPercentage * 100),\n        };\n      });\n\n      setProjections(results);\n      setLoading(false);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"affiliate-calculator\">\n      <h2>Affiliate Marketing ROI Calculator</h2>\n      <p>Target Growth: 20% (3mo) → 40% (6mo) → 70% (9mo) → 100% (12mo)</p>\n\n      <div className=\"inputs\">\n        <div>\n          <label>Current Monthly Revenue ($)</label>\n          <input\n            type=\"number\"\n            value={currentRevenue}\n            onChange={(e) => setCurrentRevenue(e.target.value)}\n            placeholder=\"100000\"\n          />\n        </div>\n        <div>\n          <label>Current Customer Acquisition Cost ($)</label>\n          <input\n            type=\"number\"\n            value={currentCAC}\n            onChange={(e) => setCurrentCAC(e.target.value)}\n            placeholder=\"50\"\n          />\n        </div>\n        <div>\n          <label>Affiliate Commission Rate (%)</label>\n          <input\n            type=\"number\"\n            value={affiliateCommission}\n            onChange={(e) => setAffiliateCommission(e.target.value)}\n            placeholder=\"10\"\n          />\n        </div>\n        <div>\n          <label>Average Order Value ($)</label>\n          <input\n            type=\"number\"\n            value={aov}\n            onChange={(e) => setAOV(e.target.value)}\n            placeholder=\"85\"\n          />\n        </div>\n        <div>\n          <label>Customer Lifetime Value - 1 Year ($)</label>\n          <input\n            type=\"number\"\n            value={cltv}\n            onChange={(e) => setCLTV(e.target.value)}\n            placeholder=\"125\"\n          />\n        </div>\n        <div>\n          <label>COGS (% of Revenue)</label>\n          <input\n            type=\"number\"\n            value={cogs}\n            onChange={(e) => setCOGS(e.target.value)}\n            placeholder=\"40\"\n          />\n        </div>\n      </div>\n\n      <button onClick={calculateProjections} disabled={loading}>\n        {loading ? <><Loader2 /> Calculating...</> : 'Calculate Projections'}\n      </button>\n\n      {projections && !loading && (\n        <div className=\"charts\">\n          {/* Revenue & Profit Trends */}\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={projections}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip formatter={(value) => `$${value.toLocaleString()}`} />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"totalRevenue\" stroke=\"#8884d8\" />\n              <Line type=\"monotone\" dataKey=\"profit\" stroke=\"#82ca9d\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AffiliateCalculator;\n","// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n// src/App.js\n\nimport React from 'react';\nimport './App.css';\nimport AffiliateCalculator from './AffiliateCalculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AffiliateCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Keep your existing global styles\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}