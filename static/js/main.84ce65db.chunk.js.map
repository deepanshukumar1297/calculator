{"version":3,"sources":["AffiliateCalculator.js","App.js","index.js"],"names":["AffiliateCalculator","currentRevenue","setCurrentRevenue","useState","currentCAC","setCurrentCAC","affiliateCommission","setAffiliateCommission","aov","setAOV","cltv","setCLTV","cogs","setCOGS","projections","setProjections","loading","setLoading","React","createElement","className","label","value","setter","placeholder","map","_ref3","index","key","htmlFor","id","type","onChange","e","target","onClick","calculateProjections","setTimeout","revenue","parseFloat","commission","averageOrderValue","customerLifetimeValue","cogsPercentage","agencyCommission","Math","min","milestones","3","6","9","12","cumulativeCustomers","results","Array","fill","_","month","monthNumber","targetPercentage","previousMilestone","Object","entries","filter","_ref","m","parseInt","reduce","acc","curr","nextMilestone","_ref2","prevMonth","prevTarget","nextMonth","nextTarget","progress","getTargetPercentageForMonth","startRevenue","newRevenue","newCustomers","round","ltvRevenue","totalMonthlyRevenue","affiliateCost","agencyCost","max","totalPartnershipSpend","cogsTotal","fbMediaSpend","fbAgencyFee","equivalentFacebookSpend","profit","rops","fbSpendDifference","totalRevenue","totalSpend","toFixed","facebookComparison","percentOfRevenue","customers","totalCustomers","disabled","Fragment","Loader2","ResponsiveContainer","width","height","LineChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","formatter","toLocaleString","Legend","Line","name","stroke","strokeWidth","header","row","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84ce65db.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { Loader2 } from 'lucide-react';\nimport './AffiliateCalculator.css';\n\n\nfunction AffiliateCalculator() {\n  const [currentRevenue, setCurrentRevenue] = useState('');\n  const [currentCAC, setCurrentCAC] = useState('');\n  const [affiliateCommission, setAffiliateCommission] = useState('');\n  const [aov, setAOV] = useState('');\n  const [cltv, setCLTV] = useState('');\n  const [cogs, setCOGS] = useState('');\n  const [projections, setProjections] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const calculateProjections = () => {\n    setLoading(true);\n    \n    setTimeout(() => {\n      if (!currentRevenue || !currentCAC || !affiliateCommission || !aov || !cltv || !cogs) {\n        setLoading(false);\n        return;\n      }\n\n      const revenue = parseFloat(currentRevenue);\n      const commission = parseFloat(affiliateCommission) / 100;\n      const averageOrderValue = parseFloat(aov);\n      const customerLifetimeValue = parseFloat(cltv);\n      const cogsPercentage = parseFloat(cogs) / 100;\n      const agencyCommission = Math.min(commission * 1.5, 0.05);\n      const fbAgencyFeePercent = 0.15;\n\n      const milestones = {\n        3: 0.20,\n        6: 0.40,\n        9: 0.70,\n        12: 1.00\n      };\n\n      const getTargetPercentageForMonth = (month) => {\n        const previousMilestone = Object.entries(milestones)\n  .filter(([m]) => parseInt(m) <= month)\n  .reduce((acc, curr) => {\n    const accMonth = parseInt(acc[0]);\n    const currMonth = parseInt(curr[0]);\n    return accMonth > currMonth ? acc : curr;\n  }, ['0', 0]);\n\nconst nextMilestone = Object.entries(milestones)\n  .filter(([m]) => parseInt(m) > month)\n  .reduce((acc, curr) => {\n    const accMonth = parseInt(acc[0]);\n    const currMonth = parseInt(curr[0]);\n    return accMonth < currMonth ? acc : curr;\n  }, ['12', 1]);\n        \n        const prevMonth = parseInt(previousMilestone[0]);\n        const prevTarget = previousMilestone[1];\n        const nextMonth = parseInt(nextMilestone[0]);\n        const nextTarget = nextMilestone[1];\n        \n        const progress = (month - prevMonth) / (nextMonth - prevMonth);\n        const smoothProgress = progress * progress * (3 - 2 * progress);\n        return prevTarget + (nextTarget - prevTarget) * smoothProgress;\n      };\n      \n      let cumulativeCustomers = 0;\n      \n      const results = Array(12).fill(0).map((_, month) => {\n        const monthNumber = month + 1;\n        const targetPercentage = getTargetPercentageForMonth(monthNumber);\n        const targetRevenue = revenue * targetPercentage;\n        \n        const startRevenue = monthNumber === 1 ? 5000 : 0;\n        const newRevenue = startRevenue + (targetRevenue - startRevenue);\n        \n        const newCustomers = Math.round(newRevenue / averageOrderValue);\n        cumulativeCustomers += newCustomers;\n        \n        const ltvRevenue = cumulativeCustomers * ((customerLifetimeValue - averageOrderValue) / 12);\n        const totalMonthlyRevenue = newRevenue + ltvRevenue;\n        \n        const affiliateCost = newRevenue * commission;\n        const agencyCost = Math.max(3500, newRevenue * agencyCommission);\n        const totalPartnershipSpend = affiliateCost + agencyCost;\n        const cogsTotal = totalMonthlyRevenue * cogsPercentage;\n        \n        const totalCustomers = totalMonthlyRevenue / averageOrderValue;\n        const fbMediaSpend = totalCustomers * parseFloat(currentCAC);\n        const fbAgencyFee = fbMediaSpend * fbAgencyFeePercent;\n        const equivalentFacebookSpend = fbMediaSpend + fbAgencyFee;\n        \n        const profit = totalMonthlyRevenue - totalPartnershipSpend - cogsTotal;\n        const rops = totalMonthlyRevenue / totalPartnershipSpend;\n        const fbSpendDifference = equivalentFacebookSpend - totalPartnershipSpend;\n\n        return {\n          month: monthNumber,\n          newRevenue: Math.round(newRevenue),\n          ltvRevenue: Math.round(ltvRevenue),\n          totalRevenue: Math.round(totalMonthlyRevenue),\n          cogs: Math.round(cogsTotal),\n          affiliateCost: Math.round(affiliateCost),\n          agencyCost: Math.round(agencyCost),\n          totalSpend: Math.round(totalPartnershipSpend),\n          profit: Math.round(profit),\n          rops: parseFloat(rops.toFixed(2)),\n          fbSpendDifference: Math.round(fbSpendDifference),\n          facebookComparison: Math.round(equivalentFacebookSpend),\n          percentOfRevenue: parseFloat(((totalMonthlyRevenue / revenue) * 100).toFixed(1)),\n          customers: newCustomers,\n          totalCustomers: cumulativeCustomers,\n          fbMediaSpend: Math.round(fbMediaSpend),\n          fbAgencyFee: Math.round(fbAgencyFee),\n          targetPercentage: Math.round(targetPercentage * 100)\n        };\n      });\n\n      setProjections(results);\n      setLoading(false);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto bg-white shadow-lg rounded-lg\">\n      <div className=\"p-6\">\n        <h2 className=\"text-2xl font-bold text-center mb-2\">Affiliate Marketing ROI Calculator</h2>\n        <p className=\"text-center text-gray-600 mb-6\">\n          Target Growth: 20% (3mo) → 40% (6mo) → 70% (9mo) → 100% (12mo)\n        </p>\n\n        <div className=\"grid gap-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 bg-gray-50 p-6 rounded-lg shadow-sm\">\n            {[\n              { \n                label: 'Current Monthly Revenue ($)', \n                value: currentRevenue, \n                setter: setCurrentRevenue, \n                placeholder: '100000' \n              },\n              { \n                label: 'Current Customer Acquisition Cost ($)', \n                value: currentCAC, \n                setter: setCurrentCAC, \n                placeholder: '50' \n              },\n              { \n                label: 'Affiliate Commission Rate (%)', \n                value: affiliateCommission, \n                setter: setAffiliateCommission, \n                placeholder: '10' \n              },\n              { \n                label: 'Average Order Value ($)', \n                value: aov, \n                setter: setAOV, \n                placeholder: '85' \n              },\n              { \n                label: 'Customer Lifetime Value - 1 Year ($)', \n                value: cltv, \n                setter: setCLTV, \n                placeholder: '125' \n              },\n              { \n                label: 'COGS (% of Revenue)', \n                value: cogs, \n                setter: setCOGS, \n                placeholder: '40' \n              }\n            ].map(({ label, value, setter, placeholder }, index) => (\n              <div key={index} className=\"grid gap-2\">\n                <label htmlFor={`input-${index}`} className=\"font-medium\">{label}</label>\n                <input\n                  id={`input-${index}`}\n                  type=\"number\"\n                  value={value}\n                  onChange={(e) => setter(e.target.value)}\n                  placeholder={placeholder}\n                  className=\"bg-white border rounded-md px-3 py-2 w-full\"\n                />\n              </div>\n            ))}\n          </div>\n\n          <div className=\"flex justify-center\">\n            <button\n              onClick={calculateProjections}\n              disabled={loading}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-2 rounded-md font-medium flex items-center\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Calculating...\n                </>\n              ) : (\n                'Calculate Projections'\n              )}\n            </button>\n          </div>\n\n          {projections && !loading && (\n            <div className=\"grid gap-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-semibold mb-4\">Revenue & Profit Trends</h3>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={projections}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip formatter={(value) => `$${value.toLocaleString()}`} />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"totalRevenue\" name=\"Total Revenue\" stroke=\"#2563eb\" strokeWidth={2} />\n                      <Line type=\"monotone\" dataKey=\"profit\" name=\"Net Profit\" stroke=\"#16a34a\" strokeWidth={2} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n                \n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-semibold mb-4\">Cost Comparison</h3>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={projections}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip formatter={(value) => `$${value.toLocaleString()}`} />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"totalSpend\" name=\"Partnership Cost\" stroke=\"#6366f1\" strokeWidth={2} />\n                      <Line type=\"monotone\" dataKey=\"facebookComparison\" name=\"Facebook Cost\" stroke=\"#f43f5e\" strokeWidth={2} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n\n              <div className=\"overflow-x-auto bg-white rounded-lg shadow\">\n                <table className=\"w-full border-collapse text-sm\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      {[\n                        'Month', 'New Rev', 'LTV Rev', 'Total Rev', 'Target %', \n                        'COGS', 'Partner Cost', 'Agency Fee', 'Total Spend', \n                        'Net Profit', 'ROPS', 'FB Total', 'Savings'\n                      ].map((header) => (\n                        <th key={header} className=\"p-3 border-b text-right font-semibold\">\n                          {header}\n                        </th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200\">\n                    {projections.map((row) => (\n                      <tr key={row.month} className=\"hover:bg-gray-50\">\n                        <td className=\"p-3\">{row.month}</td>\n                        <td className=\"p-3 text-right\">${row.newRevenue.toLocaleString()}</td>\n                        <td className=\"p-3 text-right\">${row.ltvRevenue.toLocaleString()}</td>\n                        <td className=\"p-3 text-right\">${row.totalRevenue.toLocaleString()}</td>\n                        <td className=\"p-3 text-right\">{row.targetPercentage}%</td>\n                        <td className=\"p-3 text-right\">${row.cogs.toLocaleString()}</td>\n                        <td className=\"p-3 text-right\">${row.affiliateCost.toLocaleString()}</td>\n                        <td className=\"p-3 text-right\">${row.agencyCost.toLocaleString()}</td>\n                        <td className=\"p-3 text-right\">${row.totalSpend.toLocaleString()}</td>\n                        <td className={`p-3 text-right font-bold ${row.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          ${row.profit.toLocaleString()}\n                        </td>\n                        <td className=\"p-3 text-right\">{row.rops}x</td>\n                        <td className=\"p-3 text-right\">${row.facebookComparison.toLocaleString()}</td>\n                        <td className={`p-3 text-right font-bold ${row.fbSpendDifference >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          ${row.fbSpendDifference.toLocaleString()}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AffiliateCalculator;\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n// import { Loader2 } from 'lucide-react';\n// import './AffiliateCalculator.css';\n\n// function AffiliateCalculator() {\n//     const [currentRevenue, setCurrentRevenue] = useState('');\n//     const [currentCAC, setCurrentCAC] = useState('');\n//     const [affiliateCommission, setAffiliateCommission] = useState('');\n//     const [aov, setAOV] = useState('');\n//     const [cltv, setCLTV] = useState('');\n//     const [cogs, setCOGS] = useState('');\n//     const [projections, setProjections] = useState(null);\n//     const [loading, setLoading] = useState(false);\n\n//     const calculateProjections = () => {\n//         setLoading(true);\n//         setTimeout(() => {\n//             // Calculation logic (same as before)\n//             setLoading(false);\n//         }, 1500);\n//     };\n\n//     return (\n//         <div className=\"w-full max-w-7xl mx-auto bg-white shadow-lg rounded-lg\">\n//             <div className=\"p-6\">\n//                 <h2 className=\"text-2xl font-bold text-center mb-2\">Affiliate Marketing ROI Calculator</h2>\n//                 <p className=\"text-center text-gray-600 mb-6\">\n//                     Target Growth: 20% (3mo) → 40% (6mo) → 70% (9mo) → 100% (12mo)\n//                 </p>\n\n//                 <div className=\"grid gap-8\">\n//                     <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 bg-gray-50 p-6 rounded-lg shadow-sm\">\n//                         {[\n//                             {\n//                                 label: 'Current Monthly Revenue ($)',\n//                                 value: currentRevenue,\n//                                 setter: setCurrentRevenue,\n//                                 placeholder: '100000',\n//                             },\n//                             {\n//                                 label: 'Current Customer Acquisition Cost ($)',\n//                                 value: currentCAC,\n//                                 setter: setCurrentCAC,\n//                                 placeholder: '50',\n//                             },\n//                             {\n//                                 label: 'Affiliate Commission Rate (%)',\n//                                 value: affiliateCommission,\n//                                 setter: setAffiliateCommission,\n//                                 placeholder: '10',\n//                             },\n//                             {\n//                                 label: 'Average Order Value ($)',\n//                                 value: aov,\n//                                 setter: setAOV,\n//                                 placeholder: '85',\n//                             },\n//                             {\n//                                 label: 'Customer Lifetime Value - 1 Year ($)',\n//                                 value: cltv,\n//                                 setter: setCLTV,\n//                                 placeholder: '125',\n//                             },\n//                             {\n//                                 label: 'COGS (% of Revenue)',\n//                                 value: cogs,\n//                                 setter: setCOGS,\n//                                 placeholder: '40',\n//                             },\n//                         ].map(({ label, value, setter, placeholder }, index) => (\n//                             <div key={index} className=\"grid gap-2\">\n//                                 <label htmlFor={`input-${index}`} className=\"font-medium\">\n//                                     {label}\n//                                 </label>\n//                                 <input\n//                                     id={`input-${index}`}\n//                                     type=\"number\"\n//                                     value={value}\n//                                     onChange={(e) => setter(e.target.value)}\n//                                     placeholder={placeholder}\n//                                     className=\"bg-white border rounded-md px-3 py-2 w-full input-field\"\n//                                 />\n//                             </div>\n//                         ))}\n//                     </div>\n\n//                     <div className=\"flex justify-center\">\n//                         <button\n//                             onClick={calculateProjections}\n//                             disabled={loading}\n//                             className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-2 rounded-md font-medium flex items-center\"\n//                         >\n//                             {loading ? (\n//                                 <>\n//                                     <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n//                                     Calculating...\n//                                 </>\n//                             ) : (\n//                                 'Calculate Projections'\n//                             )}\n//                         </button>\n//                     </div>\n\n//                     {projections && !loading && (\n//                         <div className=\"grid gap-6\">\n//                             <div className=\"overflow-x-auto bg-white rounded-lg shadow table-container\">\n//                                 <table className=\"w-full border-collapse text-sm\">\n//                                     <thead className=\"bg-gray-50\">\n//                                         <tr>\n//                                             {[\n//                                                 'Month',\n//                                                 'New Rev',\n//                                                 'LTV Rev',\n//                                                 'Total Rev',\n//                                                 'Target %',\n//                                                 'COGS',\n//                                                 'Partner Cost',\n//                                                 'Agency Fee',\n//                                                 'Total Spend',\n//                                                 'Net Profit',\n//                                                 'ROPS',\n//                                                 'FB Total',\n//                                                 'Savings',\n//                                             ].map((header) => (\n//                                                 <th key={header} className=\"p-3 border-b text-right font-semibold\">\n//                                                     {header}\n//                                                 </th>\n//                                             ))}\n//                                         </tr>\n//                                     </thead>\n//                                     <tbody className=\"divide-y divide-gray-200\">\n//                                         {projections.map((row) => (\n//                                             <tr key={row.month} className=\"hover:bg-gray-50\">\n//                                                 <td className=\"p-3\">{row.month}</td>\n//                                                 <td className=\"p-3 text-right\">${row.newRevenue.toLocaleString()}</td>\n//                                                 <td className=\"p-3 text-right\">${row.ltvRevenue.toLocaleString()}</td>\n//                                                 <td className=\"p-3 text-right\">${row.totalRevenue.toLocaleString()}</td>\n//                                                 <td className=\"p-3 text-right\">{row.targetPercentage}%</td>\n//                                                 <td className=\"p-3 text-right\">${row.cogs.toLocaleString()}</td>\n//                                                 <td className=\"p-3 text-right\">${row.affiliateCost.toLocaleString()}</td>\n//                                                 <td className=\"p-3 text-right\">${row.agencyCost.toLocaleString()}</td>\n//                                                 <td className=\"p-3 text-right\">${row.totalSpend.toLocaleString()}</td>\n//                                                 <td\n//                                                     className={`p-3 text-right font-bold ${\n//                                                         row.profit >= 0 ? 'text-green-600' : 'text-red-600'\n//                                                     }`}\n//                                                 >\n//                                                     ${row.profit.toLocaleString()}\n//                                                 </td>\n//                                                 <td className=\"p-3 text-right\">{row.rops}x</td>\n//                                                 <td className=\"p-3 text-right\">${row.facebookComparison.toLocaleString()}</td>\n//                                                 <td\n//                                                     className={`p-3 text-right font-bold ${\n//                                                         row.fbSpendDifference >= 0 ? 'text-green-600' : 'text-red-600'\n//                                                     }`}\n//                                                 >\n//                                                     ${row.fbSpendDifference.toLocaleString()}\n//                                                 </td>\n//                                             </tr>\n//                                         ))}\n//                                     </tbody>\n//                                 </table>\n//                             </div>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <style>\n//                 {`\n//                 .input-field {\n//                     border: 1px solid #ccc;\n//                     transition: border-color 0.3s ease;\n//                 }\n//                 .input-field:focus {\n//                     border-color: #2563eb;\n//                     outline: none;\n//                 }\n//                 .table-container {\n//                     border: 1px solid #ddd;\n//                     border-radius: 6px;\n//                 }\n//                 .table-container table {\n//                     text-align: left;\n//                 }\n//                 `}\n//             </style>\n//         </div>\n//     );\n// }\n\n// export default AffiliateCalculator;\n","// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n// src/App.js\n\nimport React from 'react';\nimport './App.css';\nimport AffiliateCalculator from './AffiliateCalculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AffiliateCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Keep your existing global styles\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}